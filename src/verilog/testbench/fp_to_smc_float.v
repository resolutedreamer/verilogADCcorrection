// ********************************************************************
//
// Copyright (C) 1994-2014, Synopsys Inc.  All Rights Reserved

// This code was generated by Synopsys's Synphony Model Compiler product and
// is intended for use solely by licensed users of this product.

// VERILOG created by Synphony Model Compiler J-2014.09, Build 015R, Aug 22 2014
// Date written:             Fri Oct 23 16:43:57 2015

// ********************************************************************

// Generated from fp_to_smc_float.slx Version 1.24 Last modified date Fri Oct 23 16:43:31 2015
module Fixed_to_FP_Leading_Zero_Counter1_LZDPstg1_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [2:0] y, // ufix3_En0
  input x2_sel, // ufix1
  input [2:0] x2, // ufix3_En0
  input x1_sel, // ufix1
  input [1:0] x1 // ufix2_En0
);
wire [2:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [2:0] N_7;  
wire [1:0] N_5;  
wire [0:0] N_1;  
wire [2:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen153_1_134;  
wire [0:0] N_GlobalEnable1_0_247;  
wire [1:0] N_x1_0_248;  
wire [0:0] N_x1_sel_0_249;  
wire [2:0] N_x2_0_250;  
wire [0:0] N_x2_sel_0_251;  
wire [2:0] N_y_1_252;  
wire [0:0] N_y_sel_1_253;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen153_1_134 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  generate
  begin: Mux_block
    wire [2:0] med  [1:0];
    reg [2:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter1_LZDP1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [1:0] y, // ufix2_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [1:0] N_4;  
wire [0:0] N_3;  
wire [1:0] N_6;  
wire [1:0] N_7;  
wire [0:0] N_8;  
wire [0:0] N_9;  
wire [0:0] N_1;  
wire [1:0] N_2;  
wire [3:0] N_sel_0_254;  
wire [1:0] N_y_1_255;  
wire [0:0] N_y_sel_1_256;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_9 = 1'b0;
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [1:0] med  [15:0];
    reg [1:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 2'b11;
assign N_7 = 2'b10;
assign N_8 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter1_LZDP2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [2:0] y, // ufix3_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [2:0] N_4;  
wire [0:0] N_3;  
wire [2:0] N_6;  
wire [2:0] N_7;  
wire [2:0] N_8;  
wire [2:0] N_9;  
wire [0:0] N_1;  
wire [2:0] N_2;  
wire [3:0] N_sel_0_257;  
wire [2:0] N_y_1_258;  
wire [0:0] N_y_sel_1_259;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [2:0] med  [15:0];
    reg [2:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 3'b111;
assign N_7 = 3'b110;
assign N_8 = 3'b101;
assign N_9 = 3'b100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter1_LZDP3 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [3:0] y, // ufix4_En0
  input [1:0] sel // ufix2_En0
);
wire [3:0] N_2;  
wire [1:0] N_3;  
wire [3:0] N_7;  
wire [3:0] N_4;  
wire [3:0] N_6;  
wire [1:0] N_sel_0_260;  
wire [3:0] N_y_1_261;  
wire GlobalResetSel;
assign y = N_6;
  assign N_3 = sel;
    assign N_6 = N_2;
  generate
  begin: Mux_block
    wire [3:0] med  [3:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_7) ;
    assign med[2] = $unsigned(N_4) ;
    assign med[3] = $unsigned(N_4) ;

    always@(*)
    begin
      if(N_3[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_3[1:0]];
    end

    assign N_2 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_4 = 4'b1000;
assign N_7 = 4'b1001;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter1_LZDPodd (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [3:0] x, // ufix4_En0
  input msb // ufix1
);
wire [3:0] N_7;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [0:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_2;  
wire [4:0] N_1;  
wire [0:0] N_msb_0_262;  
wire [3:0] N_x_0_263;  
wire [4:0] N_y_1_264;  
wire GlobalResetSel;
assign y = N_1;
  assign N_7 = x;
  assign N_5 = msb;
  generate
  begin: Add_block
    wire enab;
    wire [4:0] tmpOut;
    wire  [4:0] tmp_N_7_0;
    wire  [4:0] tmp_N_3_1;
    wire [4:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_7_0 = ($unsigned(N_7) << 0);
    assign tmp_N_3_1 = ($unsigned(N_3) << 0);
    assign  tmpOutPre =   tmp_N_7_0 + tmp_N_3_1;
    assign tmpOut = tmpOutPre;
    assign N_4 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
assign N_2 = 1'b0;
    assign N_1 = N_6;
  generate
  begin: Mux_block
    wire [4:0] med  [1:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_4) ;
    assign med[1] = $unsigned(N_2) ;

    always@(*)
    begin
      if(N_5[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_3 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter1_LZDPstg1_2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [3:0] y, // ufix4_En0
  input [3:0] x2, // ufix4_En0
  input x1_sel, // ufix1
  input [2:0] x1 // ufix3_En0
);
wire [3:0] N_6;  
wire [0:0] N_8;  
wire [3:0] N_7;  
wire [2:0] N_5;  
wire [3:0] N_2;  
wire [2:0] N_x1_0_265;  
wire [0:0] N_x1_sel_0_266;  
wire [3:0] N_x2_0_267;  
wire [3:0] N_y_1_268;  
wire GlobalResetSel;
assign y = N_2;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
    assign N_2 = N_6;
  generate
  begin: Mux_block
    wire [3:0] med  [1:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter2_LZDPstg2_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input x2_sel, // ufix1
  input [3:0] x2, // ufix4_En0
  input x1_sel, // ufix1
  input [2:0] x1 // ufix3_En0
);
wire [3:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [3:0] N_7;  
wire [2:0] N_5;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen158_1_139;  
wire [0:0] N_GlobalEnable1_0_272;  
wire [2:0] N_x1_0_273;  
wire [0:0] N_x1_sel_0_274;  
wire [3:0] N_x2_0_275;  
wire [0:0] N_x2_sel_0_276;  
wire [3:0] N_y_1_277;  
wire [0:0] N_y_sel_1_278;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen158_1_139 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  generate
  begin: Mux_block
    wire [3:0] med  [1:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter2_LZDPstg1_3 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input x2_sel, // ufix1
  input [4:0] x2, // ufix5_En0
  input x1_sel, // ufix1
  input [4:0] x1 // ufix5_En0
);
wire [4:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [4:0] N_7;  
wire [4:0] N_5;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen157_1_138;  
wire [0:0] N_GlobalEnable1_0_279;  
wire [4:0] N_x1_0_280;  
wire [0:0] N_x1_sel_0_281;  
wire [4:0] N_x2_0_282;  
wire [0:0] N_x2_sel_0_283;  
wire [4:0] N_y_1_284;  
wire [0:0] N_y_sel_1_285;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen157_1_138 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter2_LZDPstg1_2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input x2_sel, // ufix1
  input [3:0] x2, // ufix4_En0
  input x1_sel, // ufix1
  input [3:0] x1 // ufix4_En0
);
wire [3:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [3:0] N_7;  
wire [3:0] N_5;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen156_1_137;  
wire [0:0] N_GlobalEnable1_0_286;  
wire [3:0] N_x1_0_287;  
wire [0:0] N_x1_sel_0_288;  
wire [3:0] N_x2_0_289;  
wire [0:0] N_x2_sel_0_290;  
wire [3:0] N_y_1_291;  
wire [0:0] N_y_sel_1_292;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen156_1_137 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter2_LZDP3 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [3:0] N_4;  
wire [0:0] N_3;  
wire [3:0] N_6;  
wire [3:0] N_7;  
wire [3:0] N_8;  
wire [3:0] N_9;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_sel_0_306;  
wire [3:0] N_y_1_307;  
wire [0:0] N_y_sel_1_308;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [3:0] med  [15:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 4'b1011;
assign N_7 = 4'b1010;
assign N_8 = 4'b1001;
assign N_9 = 4'b1000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter2_LZDP4 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [3:0] N_4;  
wire [0:0] N_3;  
wire [3:0] N_6;  
wire [3:0] N_7;  
wire [3:0] N_8;  
wire [3:0] N_9;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_sel_0_309;  
wire [3:0] N_y_1_310;  
wire [0:0] N_y_sel_1_311;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [3:0] med  [15:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 4'b1111;
assign N_7 = 4'b1110;
assign N_8 = 4'b1101;
assign N_9 = 4'b1100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter2_LZDP5 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_312;  
wire [4:0] N_y_1_313;  
wire [0:0] N_y_sel_1_314;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b10011;
assign N_7 = 5'b10010;
assign N_8 = 5'b10001;
assign N_9 = 5'b10000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter2_LZDP6 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_315;  
wire [4:0] N_y_1_316;  
wire [0:0] N_y_sel_1_317;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b10111;
assign N_7 = 5'b10110;
assign N_8 = 5'b10101;
assign N_9 = 5'b10100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter2_LZDP7 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_318;  
wire [4:0] N_y_1_319;  
wire [0:0] N_y_sel_1_320;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b11011;
assign N_7 = 5'b11010;
assign N_8 = 5'b11001;
assign N_9 = 5'b11000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter2_LZDP8 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [4:0] N_4;  
wire [3:0] N_5;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_321;  
wire [4:0] N_y_1_322;  
wire GlobalResetSel;
assign y = N_2;
  assign N_5 = sel;
    assign N_2 = N_4;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b11111;
assign N_7 = 5'b11110;
assign N_8 = 5'b11101;
assign N_9 = 5'b11100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter2_LZDPodd (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [5:0] y, // ufix6_En0
  input [4:0] x, // ufix5_En0
  input msb // ufix1
);
wire [4:0] N_7;  
wire [0:0] N_3;  
wire [5:0] N_6;  
wire [0:0] N_5;  
wire [5:0] N_4;  
wire [0:0] N_2;  
wire [5:0] N_1;  
wire [0:0] N_msb_0_323;  
wire [4:0] N_x_0_324;  
wire [5:0] N_y_1_325;  
wire GlobalResetSel;
assign y = N_1;
  assign N_7 = x;
  assign N_5 = msb;
  generate
  begin: Add_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_7_0;
    wire  [5:0] tmp_N_3_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_7_0 = ($unsigned(N_7) << 0);
    assign tmp_N_3_1 = ($unsigned(N_3) << 0);
    assign  tmpOutPre =   tmp_N_7_0 + tmp_N_3_1;
    assign tmpOut = tmpOutPre;
    assign N_4 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
assign N_2 = 1'b0;
    assign N_1 = N_6;
  generate
  begin: Mux_block
    wire [5:0] med  [1:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_4) ;
    assign med[1] = $unsigned(N_2) ;

    always@(*)
    begin
      if(N_5[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_3 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter2_LZDPstg3_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [4:0] x2, // ufix5_En0
  input x1_sel, // ufix1
  input [3:0] x1 // ufix4_En0
);
wire [4:0] N_6;  
wire [0:0] N_8;  
wire [4:0] N_7;  
wire [3:0] N_5;  
wire [4:0] N_2;  
wire [3:0] N_x1_0_326;  
wire [0:0] N_x1_sel_0_327;  
wire [4:0] N_x2_0_328;  
wire [4:0] N_y_1_329;  
wire GlobalResetSel;
assign y = N_2;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
    assign N_2 = N_6;
  generate
  begin: Mux_block
    wire [4:0] med  [1:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter2_LZDPstg1_4 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [4:0] x2, // ufix5_En0
  input x1_sel, // ufix1
  input [4:0] x1 // ufix5_En0
);
wire [4:0] N_6;  
wire [0:0] N_8;  
wire [4:0] N_7;  
wire [4:0] N_5;  
wire [4:0] N_2;  
wire [4:0] N_x1_0_334;  
wire [0:0] N_x1_sel_0_335;  
wire [4:0] N_x2_0_336;  
wire [4:0] N_y_1_337;  
wire GlobalResetSel;
assign y = N_2;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
    assign N_2 = N_6;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [10:0] x // ufix11_En0
);
wire [10:0] N_15;  
wire [0:0] N_17;  
wire [4:0] N_14;  
wire [3:0] N_18;  
wire [4:0] N_19;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen152_1_133;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_11;  
wire [3:0] N_12;  
wire [1:0] N_13;  
wire [0:0] N_9;  
wire [3:0] N_10;  
wire [2:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_GlobalEnable1_0_269;  
wire [10:0] N_x_0_270;  
wire [4:0] N_y_1_271;  
wire GlobalResetSel;
assign y = N_19;
  assign N_15 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen152_1_133 = GlobalEnable1;
  //start Extract
    assign N_9[0] = N_15[10];
    assign N_11[0] = N_15[6];
    assign N_11[1] = N_15[7];
    assign N_11[2] = N_15[8];
    assign N_11[3] = N_15[9];
    assign N_12[0] = N_15[2];
    assign N_12[1] = N_15[3];
    assign N_12[2] = N_15[4];
    assign N_12[3] = N_15[5];
    assign N_13[0] = N_15[0];
    assign N_13[1] = N_15[1];
  //end Extract
  generate
  begin: Zmux_block
    wire [4:0] med  [1:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_14) ;
    assign med[1] = $unsigned(N_18) ;

    always@(*)
    begin
      if(N_17[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_17[0:0]];
    end

    assign N_19 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_15) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_17 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_18 = 4'b1011;
    Fixed_to_FP_Leading_Zero_Counter1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_5) ,
      .y_sel(N_6)    );
    Fixed_to_FP_Leading_Zero_Counter1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_11),
      .y(N_1) ,
      .y_sel(N_2)    );
    Fixed_to_FP_Leading_Zero_Counter1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_12),
      .y(N_3) ,
      .y_sel(N_4)    );
    Fixed_to_FP_Leading_Zero_Counter1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_13),
      .y(N_7)    );
    Fixed_to_FP_Leading_Zero_Counter1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_9),
      .x(N_10),
      .y(N_14)    );
    Fixed_to_FP_Leading_Zero_Counter1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .y(N_10)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_Leading_Zero_Counter2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [32:0] x // ufix33_En0
);
wire [5:0] N_39;  
wire [32:0] N_40;  
wire [0:0] N_42;  
wire [6:0] N_41;  
wire [5:0] N_43;  
wire [6:0] N_44;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen154_1_135;  
wire [2:0] N_17;  
wire [0:0] N_18;  
wire [3:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_31;  
wire [3:0] N_32;  
wire [3:0] N_33;  
wire [3:0] N_34;  
wire [3:0] N_35;  
wire [3:0] N_36;  
wire [3:0] N_37;  
wire [3:0] N_38;  
wire [0:0] N_29;  
wire [4:0] N_30;  
wire [3:0] N_25;  
wire [0:0] N_26;  
wire [4:0] N_27;  
wire [4:0] N_21;  
wire [0:0] N_22;  
wire [4:0] N_23;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_GlobalEnable1_0_338;  
wire [32:0] N_x_0_339;  
wire [6:0] N_y_1_340;  
wire GlobalResetSel;
assign y = N_44;
  assign N_40 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen154_1_135 = GlobalEnable1;
  synBusAdapter #(
      .inp_width(6),
      .out_width(7),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_39),
      .outp(N_41)
   );
  //start Extract
    assign N_29[0] = N_40[32];
    assign N_31[0] = N_40[28];
    assign N_31[1] = N_40[29];
    assign N_31[2] = N_40[30];
    assign N_31[3] = N_40[31];
    assign N_32[0] = N_40[24];
    assign N_32[1] = N_40[25];
    assign N_32[2] = N_40[26];
    assign N_32[3] = N_40[27];
    assign N_33[0] = N_40[20];
    assign N_33[1] = N_40[21];
    assign N_33[2] = N_40[22];
    assign N_33[3] = N_40[23];
    assign N_34[0] = N_40[16];
    assign N_34[1] = N_40[17];
    assign N_34[2] = N_40[18];
    assign N_34[3] = N_40[19];
    assign N_35[0] = N_40[12];
    assign N_35[1] = N_40[13];
    assign N_35[2] = N_40[14];
    assign N_35[3] = N_40[15];
    assign N_36[0] = N_40[8];
    assign N_36[1] = N_40[9];
    assign N_36[2] = N_40[10];
    assign N_36[3] = N_40[11];
    assign N_37[0] = N_40[4];
    assign N_37[1] = N_40[5];
    assign N_37[2] = N_40[6];
    assign N_37[3] = N_40[7];
    assign N_38[0] = N_40[0];
    assign N_38[1] = N_40[1];
    assign N_38[2] = N_40[2];
    assign N_38[3] = N_40[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_41) ;
    assign med[1] = $unsigned(N_43) ;

    always@(*)
    begin
      if(N_42[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_42[0:0]];
    end

    assign N_44 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [32:0] med1;
  wire  [32:0] med2;
  wire outp;
  assign med1 = $unsigned(N_40) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_42 = outp;
    synComparator #(
      .bitwidth(33),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_43 = 6'b100001;
    Fixed_to_FP_Leading_Zero_Counter2_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_25) ,
      .y_sel(N_26)    );
    Fixed_to_FP_Leading_Zero_Counter2_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_21) ,
      .y_sel(N_22)    );
    Fixed_to_FP_Leading_Zero_Counter2_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_19) ,
      .y_sel(N_20)    );
    Fixed_to_FP_Leading_Zero_Counter1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_17) ,
      .y_sel(N_18)    );
    Fixed_to_FP_Leading_Zero_Counter1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_31),
      .y(N_1) ,
      .y_sel(N_2)    );
    Fixed_to_FP_Leading_Zero_Counter1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_32),
      .y(N_3) ,
      .y_sel(N_4)    );
    Fixed_to_FP_Leading_Zero_Counter2_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_33),
      .y(N_5) ,
      .y_sel(N_6)    );
    Fixed_to_FP_Leading_Zero_Counter2_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_34),
      .y(N_7) ,
      .y_sel(N_8)    );
    Fixed_to_FP_Leading_Zero_Counter2_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_35),
      .y(N_9) ,
      .y_sel(N_10)    );
    Fixed_to_FP_Leading_Zero_Counter2_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_36),
      .y(N_11) ,
      .y_sel(N_12)    );
    Fixed_to_FP_Leading_Zero_Counter2_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_37),
      .y(N_13) ,
      .y_sel(N_14)    );
    Fixed_to_FP_Leading_Zero_Counter2_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_38),
      .y(N_15)    );
    Fixed_to_FP_Leading_Zero_Counter2_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_29),
      .x(N_30),
      .y(N_39)    );
    Fixed_to_FP_Leading_Zero_Counter2_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_30)    );
    Fixed_to_FP_Leading_Zero_Counter2_LZDPstg1_4  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .y(N_27)    );
    Fixed_to_FP_Leading_Zero_Counter2_LZDPstg1_4  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .y(N_23)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP_log2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] Out1, // ufix5_En0
  input [21:0] In1 // ufix22_En0
);
wire [0:0] N_3;  
wire [0:0] N_4;  
wire [0:0] N_5;  
wire [0:0] N_6;  
wire [0:0] N_7;  
wire [0:0] N_8;  
wire [0:0] N_9;  
wire [0:0] N_10;  
wire [0:0] N_11;  
wire [0:0] N_12;  
wire [0:0] N_13;  
wire [0:0] N_14;  
wire [0:0] N_15;  
wire [0:0] N_16;  
wire [0:0] N_17;  
wire [0:0] N_18;  
wire [0:0] N_19;  
wire [0:0] N_20;  
wire [0:0] N_21;  
wire [0:0] N_22;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [21:0] N_1;  
wire [4:0] N_2;  
wire [0:0] N_33;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen159_1_140;  
wire [0:0] N_32;  
wire [0:0] N_31;  
wire [0:0] N_30;  
wire [0:0] N_29;  
wire [0:0] N_28;  
wire [0:0] N_27;  
wire [0:0] N_45;  
wire [0:0] N_44;  
wire [0:0] N_26;  
wire [0:0] N_43;  
wire [0:0] N_42;  
wire [0:0] N_41;  
wire [0:0] N_40;  
wire [0:0] N_39;  
wire [0:0] N_38;  
wire [0:0] N_37;  
wire [0:0] N_36;  
wire [0:0] N_35;  
wire [0:0] N_34;  
wire [0:0] N_25;  
wire [0:0] N_GlobalEnable1_0_341;  
wire [21:0] N_In1_0_342;  
wire [4:0] N_Out1_1_343;  
wire GlobalResetSel;
assign Out1 = N_2;
  assign N_1 = In1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen159_1_140 = GlobalEnable1;
  generate
  begin: Add_block
    wire enab;
    wire [4:0] tmpOut;
    wire  [4:0] tmp_N_3_0;
    wire  [4:0] tmp_N_4_1;
    wire  [4:0] tmp_N_5_2;
    wire  [4:0] tmp_N_6_3;
    wire  [4:0] tmp_N_7_4;
    wire  [4:0] tmp_N_8_5;
    wire  [4:0] tmp_N_9_6;
    wire  [4:0] tmp_N_10_7;
    wire  [4:0] tmp_N_11_8;
    wire  [4:0] tmp_N_12_9;
    wire  [4:0] tmp_N_13_10;
    wire  [4:0] tmp_N_14_11;
    wire  [4:0] tmp_N_15_12;
    wire  [4:0] tmp_N_16_13;
    wire  [4:0] tmp_N_17_14;
    wire  [4:0] tmp_N_18_15;
    wire  [4:0] tmp_N_19_16;
    wire  [4:0] tmp_N_20_17;
    wire  [4:0] tmp_N_21_18;
    wire  [4:0] tmp_N_22_19;
    wire  [4:0] tmp_N_23_20;
    wire  [4:0] tmp_N_24_21;
    wire [4:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_3_0 = ($unsigned(N_3) << 0);
    assign tmp_N_4_1 = ($unsigned(N_4) << 0);
    assign tmp_N_5_2 = ($unsigned(N_5) << 0);
    assign tmp_N_6_3 = ($unsigned(N_6) << 0);
    assign tmp_N_7_4 = ($unsigned(N_7) << 0);
    assign tmp_N_8_5 = ($unsigned(N_8) << 0);
    assign tmp_N_9_6 = ($unsigned(N_9) << 0);
    assign tmp_N_10_7 = ($unsigned(N_10) << 0);
    assign tmp_N_11_8 = ($unsigned(N_11) << 0);
    assign tmp_N_12_9 = ($unsigned(N_12) << 0);
    assign tmp_N_13_10 = ($unsigned(N_13) << 0);
    assign tmp_N_14_11 = ($unsigned(N_14) << 0);
    assign tmp_N_15_12 = ($unsigned(N_15) << 0);
    assign tmp_N_16_13 = ($unsigned(N_16) << 0);
    assign tmp_N_17_14 = ($unsigned(N_17) << 0);
    assign tmp_N_18_15 = ($unsigned(N_18) << 0);
    assign tmp_N_19_16 = ($unsigned(N_19) << 0);
    assign tmp_N_20_17 = ($unsigned(N_20) << 0);
    assign tmp_N_21_18 = ($unsigned(N_21) << 0);
    assign tmp_N_22_19 = ($unsigned(N_22) << 0);
    assign tmp_N_23_20 = ($unsigned(N_23) << 0);
    assign tmp_N_24_21 = ($unsigned(N_24) << 0);
    assign  tmpOutPre =   tmp_N_3_0 + tmp_N_4_1 + tmp_N_5_2 + tmp_N_6_3 + tmp_N_7_4 + tmp_N_8_5 + tmp_N_9_6 + tmp_N_10_7 + tmp_N_11_8 + tmp_N_12_9
                        + tmp_N_13_10 + tmp_N_14_11 + tmp_N_15_12 + tmp_N_16_13 + tmp_N_17_14 + tmp_N_18_15 + tmp_N_19_16 + tmp_N_20_17 + tmp_N_21_18 + tmp_N_22_19
                        + tmp_N_23_20 + tmp_N_24_21;
    assign tmpOut = tmpOutPre;
    assign N_2 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  //start Extract
    assign N_3[0] = N_1[21];
    assign N_25[0] = N_1[20];
    assign N_26[0] = N_1[19];
    assign N_27[0] = N_1[18];
    assign N_28[0] = N_1[17];
    assign N_29[0] = N_1[16];
    assign N_30[0] = N_1[15];
    assign N_31[0] = N_1[14];
    assign N_32[0] = N_1[13];
    assign N_33[0] = N_1[12];
    assign N_34[0] = N_1[11];
    assign N_35[0] = N_1[10];
    assign N_36[0] = N_1[9];
    assign N_37[0] = N_1[8];
    assign N_38[0] = N_1[7];
    assign N_39[0] = N_1[6];
    assign N_40[0] = N_1[5];
    assign N_41[0] = N_1[4];
    assign N_42[0] = N_1[3];
    assign N_43[0] = N_1[2];
    assign N_44[0] = N_1[1];
    assign N_45[0] = N_1[0];
  //end Extract
  generate
  begin: Binary_Logic9_block
    assign N_12 = (N_11 | N_33);
  end // Binary_Logic9_block;
  endgenerate
  generate
  begin: Binary_Logic8_block
    assign N_11 = (N_10 | N_32);
  end // Binary_Logic8_block;
  endgenerate
  generate
  begin: Binary_Logic7_block
    assign N_10 = (N_9 | N_31);
  end // Binary_Logic7_block;
  endgenerate
  generate
  begin: Binary_Logic6_block
    assign N_9 = (N_8 | N_30);
  end // Binary_Logic6_block;
  endgenerate
  generate
  begin: Binary_Logic5_block
    assign N_8 = (N_7 | N_29);
  end // Binary_Logic5_block;
  endgenerate
  generate
  begin: Binary_Logic4_block
    assign N_7 = (N_6 | N_28);
  end // Binary_Logic4_block;
  endgenerate
  generate
  begin: Binary_Logic3_block
    assign N_6 = (N_5 | N_27);
  end // Binary_Logic3_block;
  endgenerate
  generate
  begin: Binary_Logic21_block
    assign N_24 = (N_23 | N_45);
  end // Binary_Logic21_block;
  endgenerate
  generate
  begin: Binary_Logic20_block
    assign N_23 = (N_22 | N_44);
  end // Binary_Logic20_block;
  endgenerate
  generate
  begin: Binary_Logic2_block
    assign N_5 = (N_4 | N_26);
  end // Binary_Logic2_block;
  endgenerate
  generate
  begin: Binary_Logic19_block
    assign N_22 = (N_21 | N_43);
  end // Binary_Logic19_block;
  endgenerate
  generate
  begin: Binary_Logic18_block
    assign N_21 = (N_20 | N_42);
  end // Binary_Logic18_block;
  endgenerate
  generate
  begin: Binary_Logic17_block
    assign N_20 = (N_19 | N_41);
  end // Binary_Logic17_block;
  endgenerate
  generate
  begin: Binary_Logic16_block
    assign N_19 = (N_18 | N_40);
  end // Binary_Logic16_block;
  endgenerate
  generate
  begin: Binary_Logic15_block
    assign N_18 = (N_17 | N_39);
  end // Binary_Logic15_block;
  endgenerate
  generate
  begin: Binary_Logic14_block
    assign N_17 = (N_16 | N_38);
  end // Binary_Logic14_block;
  endgenerate
  generate
  begin: Binary_Logic13_block
    assign N_16 = (N_15 | N_37);
  end // Binary_Logic13_block;
  endgenerate
  generate
  begin: Binary_Logic12_block
    assign N_15 = (N_14 | N_36);
  end // Binary_Logic12_block;
  endgenerate
  generate
  begin: Binary_Logic11_block
    assign N_14 = (N_13 | N_35);
  end // Binary_Logic11_block;
  endgenerate
  generate
  begin: Binary_Logic10_block
    assign N_13 = (N_12 | N_34);
  end // Binary_Logic10_block;
  endgenerate
  generate
  begin: Binary_Logic1_block
    assign N_4 = (N_3 | N_25);
  end // Binary_Logic1_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module y_o (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [31:0] portx, // ufix32_En0
  input [31:0] x // ufix32_En0
);
wire [31:0] N_3;  
wire [31:0] N_x_0_245;  
wire [31:0] N_portx_1_246;  
wire GlobalResetSel;
assign portx = N_3;
  assign N_3 = x;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Fixed_to_FP (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output srdyo, // ufix1
  output [31:0] y, // ufix32_En0
  input srdyi, // ufix1
  input [31:0] x // sfix32_En11
);
wire [31:0] N_4;  
wire [5:0] N_16;  
wire [6:0] N_9;  
wire [0:0] N_24;  
wire [7:0] N_11;  
wire [22:0] N_12;  
wire [31:0] N_5;  
wire [8:0] N_32;  
wire [32:0] N_18;  
wire [32:0] N_22;  
wire [4:0] N_7;  
wire [6:0] N_29;  
wire [0:0] N_8;  
wire [32:0] N_13;  
wire [0:0] N_23;  
wire [4:0] N_19;  
wire [0:0] N_2;  
wire [0:0] N_30;  
wire [23:0] N_27;  
wire [32:0] N_10;  
wire [0:0] N_21;  
wire [4:0] N_20;  
wire [5:0] N_17;  
wire [0:0] N_33;  
wire [8:0] N_6;  
wire [1:0] N_31;  
wire [4:0] N_26;  
wire [32:0] N_28;  
wire [6:0] N_25;  
wire [0:0] N_1;  
wire [31:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen151_1_132;  
wire [21:0] N_14;  
wire [10:0] N_15;  
wire [0:0] N_GlobalEnable1_0_344;  
wire [31:0] N_x_0_345;  
wire [0:0] N_srdyi_0_346;  
wire [31:0] N_y_1_347;  
wire [0:0] N_srdyo_1_348;  
wire GlobalResetSel;
assign srdyo = N_1;
assign y = N_3;
  assign N_2 = srdyi;
  assign N_4 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen151_1_132 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [32:0] med;
    wire [32:0] medo;
    wire [32:0] tmpOut;
    assign med = $signed(N_4);
    assign medo = $unsigned(tmpOut) ;
    assign N_5 = medo[31:0];
    synAbs #(
      .bitwidth(33)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [8:0] tmpOut;
    wire signed [8:0] tmp_N_16_0;
    wire  [8:0] tmp_N_9_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_16_0 = ($signed(N_16) << 0);
    assign tmp_N_9_1 = ($unsigned(N_9) << 0);
    assign  tmpOutPre =   tmp_N_16_0 + tmp_N_9_1;
    assign tmpOut = tmpOutPre;
    assign N_6 = $signed(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Comparator_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_4) ;
  assign med2 = $signed(12'b000000000000) ;
  assign N_23 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("les")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
  generate
  begin: Concat_block
    wire [31:0] med;
    assign med = { N_24, N_11, N_12 };
    assign N_3 = med[31:0];  end // Concat_block
  endgenerate
assign N_31 = 2'b00;
  synBusAdapter #(
      .inp_width(32),
      .out_width(33),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_5),
      .outp(N_10)
   );
  synBusAdapter #(
      .inp_width(9),
      .out_width(8),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_32),
      .outp(N_11)
   );
  synBusAdapter #(
      .inp_width(33),
      .out_width(24),
      .datatype("unsign"),
      .preshift(0),

      .infrac(32),
      .outfrac(23),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_18),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(33),
      .out_width(33),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_22),
      .outp(N_28)
   );
    synDelayWithEnable #( .bitwidth(5), .preferRAMImpl(2), .delaylength(2) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_7), .outp(N_20) );
    synDelayWithEnable #( .bitwidth(7), .preferRAMImpl(2), .delaylength(2) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_29), .outp(N_25) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_8), .outp(N_21) );
    synDelayWithEnable #( .bitwidth(33), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_13), .outp(N_22) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_23), .outp(N_24) );
    synDelayWithEnable #( .bitwidth(5), .preferRAMImpl(2), .delaylength(2) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_19), .outp(N_26) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_2), .outp(N_1) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_30), .outp(N_33) );
  //start Extract
    assign N_12[0] = N_27[0];
    assign N_12[1] = N_27[1];
    assign N_12[2] = N_27[2];
    assign N_12[3] = N_27[3];
    assign N_12[4] = N_27[4];
    assign N_12[5] = N_27[5];
    assign N_12[6] = N_27[6];
    assign N_12[7] = N_27[7];
    assign N_12[8] = N_27[8];
    assign N_12[9] = N_27[9];
    assign N_12[10] = N_27[10];
    assign N_12[11] = N_27[11];
    assign N_12[12] = N_27[12];
    assign N_12[13] = N_27[13];
    assign N_12[14] = N_27[14];
    assign N_12[15] = N_27[15];
    assign N_12[16] = N_27[16];
    assign N_12[17] = N_27[17];
    assign N_12[18] = N_27[18];
    assign N_12[19] = N_27[19];
    assign N_12[20] = N_27[20];
    assign N_12[21] = N_27[21];
    assign N_12[22] = N_27[22];
  //end Extract
  //start Extract3
    assign N_13[0] = N_10[0];
    assign N_13[1] = N_10[1];
    assign N_13[2] = N_10[2];
    assign N_13[3] = N_10[3];
    assign N_13[4] = N_10[4];
    assign N_13[5] = N_10[5];
    assign N_13[6] = N_10[6];
    assign N_13[7] = N_10[7];
    assign N_13[8] = N_10[8];
    assign N_13[9] = N_10[9];
    assign N_13[10] = N_10[10];
    assign N_13[11] = N_10[11];
    assign N_13[12] = N_10[12];
    assign N_13[13] = N_10[13];
    assign N_13[14] = N_10[14];
    assign N_13[15] = N_10[15];
    assign N_13[16] = N_10[16];
    assign N_13[17] = N_10[17];
    assign N_13[18] = N_10[18];
    assign N_13[19] = N_10[19];
    assign N_13[20] = N_10[20];
    assign N_13[21] = N_10[21];
    assign N_13[22] = N_10[22];
    assign N_13[23] = N_10[23];
    assign N_13[24] = N_10[24];
    assign N_13[25] = N_10[25];
    assign N_13[26] = N_10[26];
    assign N_13[27] = N_10[27];
    assign N_13[28] = N_10[28];
    assign N_13[29] = N_10[29];
    assign N_13[30] = N_10[30];
    assign N_13[31] = N_10[31];
    assign N_13[32] = N_10[32];
  //end Extract3
  //start Extract4
    assign N_14[0] = N_10[11];
    assign N_14[1] = N_10[12];
    assign N_14[2] = N_10[13];
    assign N_14[3] = N_10[14];
    assign N_14[4] = N_10[15];
    assign N_14[5] = N_10[16];
    assign N_14[6] = N_10[17];
    assign N_14[7] = N_10[18];
    assign N_14[8] = N_10[19];
    assign N_14[9] = N_10[20];
    assign N_14[10] = N_10[21];
    assign N_14[11] = N_10[22];
    assign N_14[12] = N_10[23];
    assign N_14[13] = N_10[24];
    assign N_14[14] = N_10[25];
    assign N_14[15] = N_10[26];
    assign N_14[16] = N_10[27];
    assign N_14[17] = N_10[28];
    assign N_14[18] = N_10[29];
    assign N_14[19] = N_10[30];
    assign N_14[20] = N_10[31];
    assign N_14[21] = N_10[32];
  //end Extract4
  //start Extract5
    assign N_15[0] = N_10[0];
    assign N_15[1] = N_10[1];
    assign N_15[2] = N_10[2];
    assign N_15[3] = N_10[3];
    assign N_15[4] = N_10[4];
    assign N_15[5] = N_10[5];
    assign N_15[6] = N_10[6];
    assign N_15[7] = N_10[7];
    assign N_15[8] = N_10[8];
    assign N_15[9] = N_10[9];
    assign N_15[10] = N_10[10];
  //end Extract5
  generate
  begin: Mux_block
    wire [5:0] med  [1:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_20) ;
    assign med[1] = $signed(N_17) ;

    always@(*)
    begin
      if(N_21[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_21[0:0]];
    end

    assign N_16 = tmpOut;
  end // Mux_Block
  endgenerate
  generate
  begin: Mux1_block
    wire [8:0] med  [1:0];
    reg [8:0] tmpOut;
    assign med[0] = $signed(N_6) ;
    assign med[1] = $signed(N_31) ;

    always@(*)
    begin
      if(N_33[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_33[0:0]];
    end

    assign N_32 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [5:0] med ;
    wire signed [5:0] medo;
    wire [5:0] tmpOut;
    assign med = $unsigned(N_26);
    assign medo = $signed(tmpOut) ;
    assign N_17 = medo[5:0];
    synNegate #(
      .bitwidth(6)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [32:0] medo;
    wire [32:0] tmpIn;
    assign tmpIn = (N_28) ;
    assign N_18 = medo[32:0];
    synShifter #(
      .inpBitW(33),
      .outBitW(33),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_25[6:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Comparator2_block
  wire  [32:0] med1;
  wire  [32:0] med2;
  wire outp;
  assign med1 = $unsigned(N_10) ;
  assign med2 = $unsigned(11'b00000000000) ;
  assign N_30 = outp;
    synComparator #(
      .bitwidth(33),
      .datatype("unsign"),
      .opr("equ")
    ) Comparator2 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator2_block;
  endgenerate
  generate
  begin: Comparator1_block
  wire  [21:0] med1;
  wire  [21:0] med2;
  wire outp;
  assign med1 = $unsigned(N_14) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_8 = outp;
    synComparator #(
      .bitwidth(22),
      .datatype("unsign"),
      .opr("equ")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
assign N_9 = 7'b1111111;
    Fixed_to_FP_Leading_Zero_Counter1  myLeading_Zero_Counter1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_15),
      .y(N_19)    );
    Fixed_to_FP_Leading_Zero_Counter2  myLeading_Zero_Counter2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_13),
      .y(N_29)    );
    Fixed_to_FP_log2  mylog2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_14),
      .Out1(N_7)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

//@
module fp_to_smc_float (
  input clk,
  input GlobalReset,
  output [31:0] y_o_portx, // ufix32_En0
  input [20:0] x_i, // sfix21_En0
  output srdyo_o, // ufix1
  input srdyi_i // ufix1
//@
);
//@

wire [0:0] N_4;  
wire [20:0] N_5;  
wire [31:0] N_9;  
wire [0:0] GlobalEnableSignal1;  
wire [31:0] N_6;  
wire [0:0] N_7;  
wire [31:0] y_o_N_portx_1_129;  
wire GlobalResetSel;
  wire GlobalEnable1;
  assign GlobalEnable1 = 1;
    y_o  myy_o (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_6),
      .portx(y_o_N_portx_1_129)    );
    Fixed_to_FP  myFixed_to_FP (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_9),
      .srdyi(N_4),
      .y(N_6) ,
      .srdyo(N_7)    );
  assign GlobalEnableSignal1 = GlobalEnable1;
assign y_o_portx = y_o_N_portx_1_129;
  assign N_5 = x_i;
assign srdyo_o = N_7;
  assign N_4 = srdyi_i;
  synBusAdapter #(
      .inp_width(21),
      .out_width(32),
      .datatype("signed"),
      .preshift(-11)
    ) Convert (
      .inp(N_5),
      .outp(N_9)
   );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

