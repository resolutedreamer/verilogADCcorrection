// ********************************************************************
//
// Copyright (C) 1994-2014, Synopsys Inc.  All Rights Reserved

// This code was generated by Synopsys's Synphony Model Compiler product and
// is intended for use solely by licensed users of this product.

// VERILOG created by Synphony Model Compiler J-2014.09, Build 015R, Aug 22 2014
// Date written:             Fri Oct 23 15:31:17 2015

// ********************************************************************

// Generated from smc_float_adder.slx Version 1.15 Last modified date Fri Oct 23 15:30:07 2015
module FP_Adder_getmsbpos1_LZDPstg2_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input x2_sel, // ufix1
  input [3:0] x2, // ufix4_En0
  input x1_sel, // ufix1
  input [2:0] x1 // ufix3_En0
);
wire [3:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [3:0] N_7;  
wire [2:0] N_5;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen91_1_101;  
wire [0:0] N_GlobalEnable1_0_169;  
wire [2:0] N_x1_0_170;  
wire [0:0] N_x1_sel_0_171;  
wire [3:0] N_x2_0_172;  
wire [0:0] N_x2_sel_0_173;  
wire [3:0] N_y_1_174;  
wire [0:0] N_y_sel_1_175;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen91_1_101 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  generate
  begin: Mux_block
    wire [3:0] med  [1:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Adder_getmsbpos1_LZDPstg1_2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input x2_sel, // ufix1
  input [3:0] x2, // ufix4_En0
  input x1_sel, // ufix1
  input [3:0] x1 // ufix4_En0
);
wire [3:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [3:0] N_7;  
wire [3:0] N_5;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen90_1_100;  
wire [0:0] N_GlobalEnable1_0_176;  
wire [3:0] N_x1_0_177;  
wire [0:0] N_x1_sel_0_178;  
wire [3:0] N_x2_0_179;  
wire [0:0] N_x2_sel_0_180;  
wire [3:0] N_y_1_181;  
wire [0:0] N_y_sel_1_182;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen90_1_100 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Adder_getmsbpos1_LZDPstg1_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [2:0] y, // ufix3_En0
  input x2_sel, // ufix1
  input [2:0] x2, // ufix3_En0
  input x1_sel, // ufix1
  input [1:0] x1 // ufix2_En0
);
wire [2:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [2:0] N_7;  
wire [1:0] N_5;  
wire [0:0] N_1;  
wire [2:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen89_1_99;  
wire [0:0] N_GlobalEnable1_0_183;  
wire [1:0] N_x1_0_184;  
wire [0:0] N_x1_sel_0_185;  
wire [2:0] N_x2_0_186;  
wire [0:0] N_x2_sel_0_187;  
wire [2:0] N_y_1_188;  
wire [0:0] N_y_sel_1_189;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen89_1_99 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  generate
  begin: Mux_block
    wire [2:0] med  [1:0];
    reg [2:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Adder_getmsbpos1_LZDP1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [1:0] y, // ufix2_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [1:0] N_4;  
wire [0:0] N_3;  
wire [1:0] N_6;  
wire [1:0] N_7;  
wire [0:0] N_8;  
wire [0:0] N_9;  
wire [0:0] N_1;  
wire [1:0] N_2;  
wire [3:0] N_sel_0_190;  
wire [1:0] N_y_1_191;  
wire [0:0] N_y_sel_1_192;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_9 = 1'b0;
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [1:0] med  [15:0];
    reg [1:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 2'b11;
assign N_7 = 2'b10;
assign N_8 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Adder_getmsbpos1_LZDP2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [2:0] y, // ufix3_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [2:0] N_4;  
wire [0:0] N_3;  
wire [2:0] N_6;  
wire [2:0] N_7;  
wire [2:0] N_8;  
wire [2:0] N_9;  
wire [0:0] N_1;  
wire [2:0] N_2;  
wire [3:0] N_sel_0_193;  
wire [2:0] N_y_1_194;  
wire [0:0] N_y_sel_1_195;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [2:0] med  [15:0];
    reg [2:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 3'b111;
assign N_7 = 3'b110;
assign N_8 = 3'b101;
assign N_9 = 3'b100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Adder_getmsbpos1_LZDP3 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [3:0] N_4;  
wire [0:0] N_3;  
wire [3:0] N_6;  
wire [3:0] N_7;  
wire [3:0] N_8;  
wire [3:0] N_9;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_sel_0_196;  
wire [3:0] N_y_1_197;  
wire [0:0] N_y_sel_1_198;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [3:0] med  [15:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 4'b1011;
assign N_7 = 4'b1010;
assign N_8 = 4'b1001;
assign N_9 = 4'b1000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Adder_getmsbpos1_LZDP4 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [3:0] N_4;  
wire [0:0] N_3;  
wire [3:0] N_6;  
wire [3:0] N_7;  
wire [3:0] N_8;  
wire [3:0] N_9;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_sel_0_199;  
wire [3:0] N_y_1_200;  
wire [0:0] N_y_sel_1_201;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [3:0] med  [15:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 4'b1111;
assign N_7 = 4'b1110;
assign N_8 = 4'b1101;
assign N_9 = 4'b1100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Adder_getmsbpos1_LZDP5 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_202;  
wire [4:0] N_y_1_203;  
wire [0:0] N_y_sel_1_204;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b10011;
assign N_7 = 5'b10010;
assign N_8 = 5'b10001;
assign N_9 = 5'b10000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Adder_getmsbpos1_LZDP6 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [4:0] N_4;  
wire [3:0] N_5;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_205;  
wire [4:0] N_y_1_206;  
wire GlobalResetSel;
assign y = N_2;
  assign N_5 = sel;
    assign N_2 = N_4;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b10111;
assign N_7 = 5'b10110;
assign N_8 = 5'b10101;
assign N_9 = 5'b10100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Adder_getmsbpos1_LZDPstg2_2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [4:0] x2, // ufix5_En0
  input x1_sel, // ufix1
  input [3:0] x1 // ufix4_En0
);
wire [4:0] N_6;  
wire [0:0] N_8;  
wire [4:0] N_7;  
wire [3:0] N_5;  
wire [4:0] N_2;  
wire [3:0] N_x1_0_207;  
wire [0:0] N_x1_sel_0_208;  
wire [4:0] N_x2_0_209;  
wire [4:0] N_y_1_210;  
wire GlobalResetSel;
assign y = N_2;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
    assign N_2 = N_6;
  generate
  begin: Mux_block
    wire [4:0] med  [1:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Adder_getmsbpos1_LZDPstg1_3 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [4:0] x2, // ufix5_En0
  input x1_sel, // ufix1
  input [4:0] x1 // ufix5_En0
);
wire [4:0] N_6;  
wire [0:0] N_8;  
wire [4:0] N_7;  
wire [4:0] N_5;  
wire [4:0] N_2;  
wire [4:0] N_x1_0_211;  
wire [0:0] N_x1_sel_0_212;  
wire [4:0] N_x2_0_213;  
wire [4:0] N_y_1_214;  
wire GlobalResetSel;
assign y = N_2;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
    assign N_2 = N_6;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Adder_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [5:0] y, // ufix6_En0
  input [23:0] x // ufix24_En0
);
wire [4:0] N_21;  
wire [23:0] N_28;  
wire [0:0] N_30;  
wire [5:0] N_29;  
wire [4:0] N_31;  
wire [5:0] N_32;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen88_1_98;  
wire [2:0] N_13;  
wire [0:0] N_14;  
wire [3:0] N_15;  
wire [0:0] N_16;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_22;  
wire [3:0] N_23;  
wire [3:0] N_24;  
wire [3:0] N_25;  
wire [3:0] N_26;  
wire [3:0] N_27;  
wire [3:0] N_17;  
wire [0:0] N_18;  
wire [4:0] N_19;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_GlobalEnable1_0_215;  
wire [23:0] N_x_0_216;  
wire [5:0] N_y_1_217;  
wire GlobalResetSel;
assign y = N_32;
  assign N_28 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen88_1_98 = GlobalEnable1;
  synBusAdapter #(
      .inp_width(5),
      .out_width(6),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_21),
      .outp(N_29)
   );
  //start Extract
    assign N_22[0] = N_28[20];
    assign N_22[1] = N_28[21];
    assign N_22[2] = N_28[22];
    assign N_22[3] = N_28[23];
    assign N_23[0] = N_28[16];
    assign N_23[1] = N_28[17];
    assign N_23[2] = N_28[18];
    assign N_23[3] = N_28[19];
    assign N_24[0] = N_28[12];
    assign N_24[1] = N_28[13];
    assign N_24[2] = N_28[14];
    assign N_24[3] = N_28[15];
    assign N_25[0] = N_28[8];
    assign N_25[1] = N_28[9];
    assign N_25[2] = N_28[10];
    assign N_25[3] = N_28[11];
    assign N_26[0] = N_28[4];
    assign N_26[1] = N_28[5];
    assign N_26[2] = N_28[6];
    assign N_26[3] = N_28[7];
    assign N_27[0] = N_28[0];
    assign N_27[1] = N_28[1];
    assign N_27[2] = N_28[2];
    assign N_27[3] = N_28[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [5:0] med  [1:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_29) ;
    assign med[1] = $unsigned(N_31) ;

    always@(*)
    begin
      if(N_30[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_30[0:0]];
    end

    assign N_32 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [23:0] med1;
  wire  [23:0] med2;
  wire outp;
  assign med1 = $unsigned(N_28) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_30 = outp;
    synComparator #(
      .bitwidth(24),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_31 = 5'b11000;
    FP_Adder_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_17) ,
      .y_sel(N_18)    );
    FP_Adder_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_15) ,
      .y_sel(N_16)    );
    FP_Adder_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_13) ,
      .y_sel(N_14)    );
    FP_Adder_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_22),
      .y(N_1) ,
      .y_sel(N_2)    );
    FP_Adder_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_23),
      .y(N_3) ,
      .y_sel(N_4)    );
    FP_Adder_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_24),
      .y(N_5) ,
      .y_sel(N_6)    );
    FP_Adder_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_25),
      .y(N_7) ,
      .y_sel(N_8)    );
    FP_Adder_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_26),
      .y(N_9) ,
      .y_sel(N_10)    );
    FP_Adder_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_27),
      .y(N_11)    );
    FP_Adder_getmsbpos1_LZDPstg2_2  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .y(N_21)    );
    FP_Adder_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .y(N_19)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module x_i (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [31:0] y, // ufix32_En0
  input [31:0] porty // ufix32_En0
);
wire [31:0] N_1;  
wire [31:0] N_porty_0_163;  
wire [31:0] N_y_1_164;  
wire GlobalResetSel;
assign y = N_1;
  assign N_1 = porty;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module z_o (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [31:0] portx, // ufix32_En0
  input [31:0] x // ufix32_En0
);
wire [31:0] N_3;  
wire [31:0] N_x_0_167;  
wire [31:0] N_portx_1_168;  
wire GlobalResetSel;
assign portx = N_3;
  assign N_3 = x;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Adder (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output srdyo, // ufix1
  output [31:0] z, // ufix32_En0
  input srdyi, // ufix1
  input [31:0] y, // ufix32_En0
  input [31:0] x // ufix32_En0
);
wire [25:0] N_73;  
wire [7:0] N_51;  
wire [0:0] N_29;  
wire [7:0] N_41;  
wire [7:0] N_42;  
wire [7:0] N_53;  
wire [33:0] N_47;  
wire [33:0] N_48;  
wire [5:0] N_97;  
wire [25:0] N_52;  
wire [0:0] N_56;  
wire [7:0] N_54;  
wire [22:0] N_55;  
wire [0:0] N_30;  
wire [22:0] N_77;  
wire [0:0] N_31;  
wire [22:0] N_83;  
wire [9:0] N_90;  
wire [8:0] N_71;  
wire [8:0] N_72;  
wire [23:0] N_27;  
wire [23:0] N_28;  
wire [23:0] N_80;  
wire [23:0] N_96;  
wire [34:0] N_16;  
wire [23:0] N_89;  
wire [7:0] N_86;  
wire [7:0] N_75;  
wire [32:0] N_94;  
wire [32:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [33:0] N_87;  
wire [33:0] N_88;  
wire [25:0] N_12;  
wire [7:0] N_49;  
wire [7:0] N_82;  
wire [7:0] N_32;  
wire [22:0] N_84;  
wire [0:0] N_22;  
wire [23:0] N_35;  
wire [23:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [8:0] N_14;  
wire [8:0] N_15;  
wire [25:0] N_39;  
wire [0:0] N_1;  
wire [31:0] N_3;  
wire [25:0] N_50;  
wire [31:0] N_4;  
wire [23:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [32:0] N_43;  
wire [33:0] N_92;  
wire [0:0] N_46;  
wire [32:0] N_44;  
wire [33:0] N_93;  
wire [0:0] N_79;  
wire [23:0] N_38;  
wire [23:0] N_37;  
wire [9:0] N_17;  
wire [8:0] N_13;  
wire [23:0] N_57;  
wire [8:0] N_33;  
wire [23:0] N_58;  
wire [8:0] N_34;  
wire [23:0] N_76;  
wire [0:0] N_2;  
wire [31:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen87_1_97;  
wire [0:0] N_GlobalEnable1_0_218;  
wire [31:0] N_x_0_219;  
wire [31:0] N_y_0_220;  
wire [0:0] N_srdyi_0_221;  
wire [31:0] N_z_1_222;  
wire [0:0] N_srdyo_1_223;  
wire GlobalResetSel;
assign srdyo = N_2;
assign z = N_26;
  assign N_1 = srdyi;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen87_1_97 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [26:0] med;
    wire [26:0] medo;
    wire [26:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[25:0];
    synAbs #(
      .bitwidth(27)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [8:0] tmpOut;
    wire  [8:0] tmp_N_51_0;
    wire  [8:0] tmp_N_29_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [8:0] tmpOut;
    wire  [8:0] tmp_N_41_0;
    wire  [8:0] tmp_N_42_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [8:0] tmpOut;
    wire  [8:0] tmp_N_41_0;
    wire  [8:0] tmp_N_53_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [34:0] tmpOut;
    wire signed [34:0] tmp_N_47_0;
    wire signed [34:0] tmp_N_48_1;
    wire [34:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [9:0] tmpOut;
    wire  [9:0] tmp_N_51_0;
    wire  [9:0] tmp_N_97_1;
    wire  [9:0] tmp_N_29_2;
    wire [9:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [25:0] med1;
  wire signed [25:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(24'b000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(26),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [31:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[31:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [23:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[23:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [23:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[23:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(10),
      .out_width(8),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(9),
      .out_width(9),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(9),
      .out_width(9),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(24),
      .out_width(24),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(24),
      .out_width(24),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(24),
      .out_width(24),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(24),
      .out_width(24),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(35),
      .out_width(26),
      .datatype("signed"),
      .preshift(0),

      .infrac(33),
      .outfrac(23),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(24),
      .out_width(24),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(33), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(33), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(34), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(34), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(26), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(26), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(23), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(24), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(24), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(9), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(9), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(26), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(9) ) Delaysrdy_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_1), .outp(N_2) );
  //start Extract
    assign N_74[0] = N_3[31];
  //end Extract
  //start Extract1
    assign N_75[0] = N_3[23];
    assign N_75[1] = N_3[24];
    assign N_75[2] = N_3[25];
    assign N_75[3] = N_3[26];
    assign N_75[4] = N_3[27];
    assign N_75[5] = N_3[28];
    assign N_75[6] = N_3[29];
    assign N_75[7] = N_3[30];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_3[0];
    assign N_77[1] = N_3[1];
    assign N_77[2] = N_3[2];
    assign N_77[3] = N_3[3];
    assign N_77[4] = N_3[4];
    assign N_77[5] = N_3[5];
    assign N_77[6] = N_3[6];
    assign N_77[7] = N_3[7];
    assign N_77[8] = N_3[8];
    assign N_77[9] = N_3[9];
    assign N_77[10] = N_3[10];
    assign N_77[11] = N_3[11];
    assign N_77[12] = N_3[12];
    assign N_77[13] = N_3[13];
    assign N_77[14] = N_3[14];
    assign N_77[15] = N_3[15];
    assign N_77[16] = N_3[16];
    assign N_77[17] = N_3[17];
    assign N_77[18] = N_3[18];
    assign N_77[19] = N_3[19];
    assign N_77[20] = N_3[20];
    assign N_77[21] = N_3[21];
    assign N_77[22] = N_3[22];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[24];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[31];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[23];
    assign N_82[1] = N_4[24];
    assign N_82[2] = N_4[25];
    assign N_82[3] = N_4[26];
    assign N_82[4] = N_4[27];
    assign N_82[5] = N_4[28];
    assign N_82[6] = N_4[29];
    assign N_82[7] = N_4[30];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [33:0] med  [1:0];
    reg [33:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [33:0] med  [1:0];
    reg [33:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [9:0] med  [1:0];
    reg [9:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [33:0] med ;
    wire signed [33:0] medo;
    wire [33:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[33:0];
    synNegate #(
      .bitwidth(34)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [33:0] med ;
    wire signed [33:0] medo;
    wire [33:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[33:0];
    synNegate #(
      .bitwidth(34)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [32:0] medo;
    wire [32:0] tmpIn;
    assign tmpIn = (N_57) <<< 9;
    assign N_94 = medo[32:0];
    synShifter #(
      .inpBitW(33),
      .outBitW(33),
      .shfBitW(9),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[8:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [32:0] medo;
    wire [32:0] tmpIn;
    assign tmpIn = (N_58) <<< 9;
    assign N_95 = medo[32:0];
    synShifter #(
      .inpBitW(33),
      .outBitW(33),
      .shfBitW(9),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[8:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [23:0] medo;
    wire [23:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[23:0];
    synShifter #(
      .inpBitW(24),
      .outBitW(24),
      .shfBitW(6),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[5:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    FP_Adder_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

//@
module smc_float_adder (
  input clk,
  input GlobalReset,
  input [31:0] x_i_porty, // ufix32_En0
  input [31:0] y_i_porty, // ufix32_En0
  output [31:0] z_o_portx, // ufix32_En0
  output srdyo_o, // ufix1
  input srdyi_i // ufix1
//@
);
//@

wire [0:0] N_5;  
wire [31:0] y_i_N_porty_1_5;  
wire [31:0] x_i_N_porty_1_11;  
wire [0:0] GlobalEnableSignal1;  
wire [31:0] N_8;  
wire [0:0] N_9;  
wire [31:0] z_o_N_portx_1_94;  
wire [31:0] N_7;  
wire [31:0] N_6;  
wire GlobalResetSel;
  wire GlobalEnable1;
  assign GlobalEnable1 = 1;
    x_i  myx_i (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(x_i_N_porty_1_11),
      .y(N_6)    );
    x_i  myy_i (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(y_i_N_porty_1_5),
      .y(N_7)    );
    z_o  myz_o (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_8),
      .portx(z_o_N_portx_1_94)    );
    FP_Adder  myFP_Adder (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_6),
      .y(N_7),
      .srdyi(N_5),
      .z(N_8) ,
      .srdyo(N_9)    );
  assign GlobalEnableSignal1 = GlobalEnable1;
  assign x_i_N_porty_1_11 = x_i_porty;
  assign y_i_N_porty_1_5 = y_i_porty;
assign z_o_portx = z_o_N_portx_1_94;
assign srdyo_o = N_9;
  assign N_5 = srdyi_i;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

